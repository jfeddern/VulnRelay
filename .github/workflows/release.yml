name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v1.2.3

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: jfeddern/vulnrelay
  HELM_CHART_NAME: vulnrelay

jobs:
  # Validate the release tag and extract version info
  validate:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      is_prerelease: ${{ steps.get_version.outputs.prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
          # Check if this is a prerelease (contains alpha, beta, rc, etc.)
          if [[ $VERSION =~ (alpha|beta|rc|pre) ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Extracted version: $VERSION"
          echo "Is prerelease: $(echo $VERSION | grep -E '(alpha|beta|rc|pre)' && echo true || echo false)"

      - name: Validate version format
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-alpha1"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

  # Run tests and security checks
  test:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run tests
        run: |
          go test ./... -v -race -coverprofile=coverage.out
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html
          retention-days: 7

      - name: Check test coverage
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total test coverage: ${COVERAGE}%"
          
          # Require minimum 70% coverage for releases
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "❌ Test coverage ($COVERAGE%) is below minimum requirement (70%)"
            exit 1
          fi
          echo "✅ Test coverage meets requirements: ${COVERAGE}%"

  # Build Docker image
  build-docker:
    runs-on: ubuntu-latest
    needs: [validate, test]
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Generate build timestamp
        id: timestamp
        run: echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate.outputs.version }}
            BUILD_DATE=${{ steps.timestamp.outputs.build_date }}
            COMMIT=${{ github.sha }}

  # Build and push Helm chart
  build-helm:
    runs-on: ubuntu-latest
    needs: [validate, test]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Helm chart metadata
        run: |
          VERSION=${{ needs.validate.outputs.version }}
          # Remove 'v' prefix for chart version
          CHART_VERSION=${VERSION#v}
          
          # Update Chart.yaml
          sed -i "s/^version:.*/version: ${CHART_VERSION}/" helm/vulnrelay/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${VERSION}\"/" helm/vulnrelay/Chart.yaml
          
          # Update values.yaml with new image tag
          sed -i "s|repository: .*|repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}|" helm/vulnrelay/values.yaml
          sed -i "s/tag: .*/tag: \"${VERSION}\"/" helm/vulnrelay/values.yaml
          
          echo "Updated Chart.yaml:"
          cat helm/vulnrelay/Chart.yaml
          
          echo "Updated values.yaml (image section):"
          grep -A 5 "image:" helm/vulnrelay/values.yaml

      - name: Lint Helm chart
        run: |
          helm lint helm/vulnrelay

      - name: Test Helm chart installation
        run: |
          helm template test-release helm/vulnrelay \
            --set config.ecrAccountId=123456789012 \
            --set config.ecrRegion=us-east-1 \
            > /tmp/helm-template.yaml
          
          echo "Generated Kubernetes manifests:"
          cat /tmp/helm-template.yaml

      - name: Package Helm chart
        run: |
          helm package helm/vulnrelay --destination /tmp/

      - name: Push Helm chart to OCI registry
        run: |
          VERSION=${{ needs.validate.outputs.version }}
          CHART_VERSION=${VERSION#v}
          
          helm push /tmp/vulnrelay-${CHART_VERSION}.tgz oci://${{ env.REGISTRY }}/jfeddern/vulnrelay/charts

      - name: Upload Helm chart artifact
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart
          path: /tmp/vulnrelay-*.tgz
          retention-days: 30

  # Sign artifacts with cosign
  sign-artifacts:
    runs-on: ubuntu-latest
    needs: [validate, build-docker, build-helm]
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign Docker image
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}

      - name: Sign Helm chart
        run: |
          VERSION=${{ needs.validate.outputs.version }}
          CHART_VERSION=${VERSION#v}
          cosign sign --yes ${{ env.REGISTRY }}/jfeddern/vulnrelay/charts/vulnrelay:${CHART_VERSION}

  # Create GitHub release
  create-release:
    runs-on: ubuntu-latest
    needs: [validate, build-docker, build-helm, sign-artifacts]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate changelog
        id: changelog
        run: |
          VERSION=${{ needs.validate.outputs.version }}
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          echo "## What's Changed" > changelog.md
          echo "" >> changelog.md
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Changes since $PREVIOUS_TAG:" >> changelog.md
            echo "" >> changelog.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> changelog.md
          else
            echo "- Initial release" >> changelog.md
          fi
          
          echo "" >> changelog.md
          echo "## Container Images" >> changelog.md
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION\`" >> changelog.md
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> changelog.md
          echo "" >> changelog.md
          echo "## Helm Chart" >> changelog.md
          echo "\`\`\`bash" >> changelog.md
          echo "helm install vulnrelay oci://${{ env.REGISTRY }}/jfeddern/vulnrelay/charts/vulnrelay --version ${VERSION#v}" >> changelog.md
          echo "\`\`\`" >> changelog.md
          echo "" >> changelog.md
          echo "## Security" >> changelog.md
          echo "All artifacts are signed with [Sigstore Cosign](https://github.com/sigstore/cosign) and include SBOMs." >> changelog.md
          
          cat changelog.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          name: Release ${{ needs.validate.outputs.version }}
          body_path: changelog.md
          prerelease: ${{ needs.validate.outputs.is_prerelease == 'true' }}
          generate_release_notes: true
          files: |
            ./artifacts/helm-chart/*.tgz
            ./artifacts/sbom/*.json
            ./artifacts/coverage-report/coverage.html

  # Notify on completion
  notify:
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: always()
    steps:
      - name: Release status notification
        run: |
          VERSION=${{ needs.validate.outputs.version }}
          if [[ "${{ needs.create-release.result }}" == "success" ]]; then
            echo "🎉 Successfully released VulnRelay $VERSION"
            echo "📦 Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION"
            echo "⛵ Helm chart: oci://${{ env.REGISTRY }}/jfeddern/vulnrelay/charts/vulnrelay"
            echo "🔒 All artifacts signed with Cosign"
            echo "📋 SBOM generated and attached to release"
          else
            echo "❌ Release failed for VulnRelay $VERSION"
            exit 1
          fi